<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <title>{{ title }}</title>
  <link rel="stylesheet" href="/style.css">
  <script src="/assets/js/theme-toggle.js"></script>
  <script src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>
  <script src="/assets/js/touch-handler.js"></script>
  </head>
<body>
  <main>
    {{ content | safe }}
  </main>
  {% include 'footer.njk' %}

  <script>
    if (window.netlifyIdentity) {
      window.netlifyIdentity.on("init", (user) => {
        if (!user) {
          window.netlifyIdentity.on("login", () => {
            document.location.href = "/admin/";
          });
        }
      });
    }
    
    // Enhanced navigation with performance optimizations and modern features
    document.addEventListener('DOMContentLoaded', function() {
      const navCircles = document.querySelectorAll('.nav-circle');
      const container = document.querySelector('.circular-nav-container');
      const nav = document.querySelector('.circular-nav');
      
      // Performance optimization flags
      let isAnimating = false;
      let animationFrame = null;
      
      // Enhanced touch and interaction handling
      navCircles.forEach((circle, index) => {
        // Optimize for performance - only enable will-change during interactions
        circle.addEventListener('pointerenter', function() {
          if (window.matchMedia('(hover: hover)').matches) {
            this.style.willChange = 'scale, background';
          }
        });
        
        circle.addEventListener('pointerleave', function() {
          this.style.willChange = 'auto';
        });
        
        // Improved click handling for better user experience
        circle.addEventListener('click', function(e) {
          const href = this.getAttribute('href');
          
          // Add visual feedback for clicks without transform changes
          this.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
          this.style.opacity = '0.9';
          setTimeout(() => {
            this.style.backgroundColor = '';
            this.style.opacity = '';
          }, 150);
          
          // Handle anchor links with smooth scroll
          if (href && href.startsWith('#') && href !== '#') {
            e.preventDefault();
            const targetId = href.substring(1);
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
            }
          }
        });
        
        // Improved touch handling for mobile devices
        circle.addEventListener('touchstart', function(e) {
          // Prevent iOS double-tap zoom
          e.preventDefault();
          this.style.backgroundColor = 'rgba(255, 255, 255, 0.6)';
          this.style.opacity = '0.8';
          // Don't modify scale to prevent ghost movement
          this.touchStarted = true;
        }, { passive: false });
        
        circle.addEventListener('touchend', function(e) {
          this.style.backgroundColor = '';
          this.style.opacity = '';
          // Don't reset scale to prevent ghost movement
          
          // CRITICAL FIX: Actually navigate on touchend!
          if (this.touchStarted) {
            e.preventDefault();
            const href = this.getAttribute('href');
            console.log('Homepage touch navigation to:', href);
            
            if (href) {
              if (href.startsWith('#') && href !== '#') {
                // Handle anchor links
                const targetId = href.substring(1);
                const targetElement = document.getElementById(targetId);
                if (targetElement) {
                  targetElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                  });
                }
              } else {
                // Regular navigation
                window.location.href = href;
              }
            }
            
            this.touchStarted = false;
          }
        });
      });
      
      // Optimized parallax background movement (only on desktop)
      if (container && window.innerWidth > 768 && window.matchMedia('(hover: hover)').matches) {
        let mouseX = 0.5, mouseY = 0.5;
        let bgX = 0, bgY = 0;
        let isMouseActive = false;
        
        container.addEventListener('pointerenter', function() {
          isMouseActive = true;
        });
        
        container.addEventListener('pointerleave', function() {
          isMouseActive = false;
        });
        
        container.addEventListener('pointermove', function(e) {
          if (!isMouseActive) return;
          
          const rect = this.getBoundingClientRect();
          mouseX = (e.clientX - rect.left) / rect.width;
          mouseY = (e.clientY - rect.top) / rect.height;
        });
        
        // Smooth background animation with better performance
        function animateBackground() {
          if (isMouseActive) {
            const targetX = (mouseX - 0.5) * 1.5;
            const targetY = (mouseY - 0.5) * 1.5;
            
            bgX += (targetX - bgX) * 0.015;
            bgY += (targetY - bgY) * 0.015;
            
            container.style.backgroundPosition = `${50 + bgX}% ${50 + bgY}%`;
          }
          
          requestAnimationFrame(animateBackground);
        }
        
        animateBackground();
      }
      
      // Intersection Observer for better performance
      if ('IntersectionObserver' in window) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.style.animationPlayState = 'running';
            }
          });
        }, {
          threshold: 0.1,
          rootMargin: '50px'
        });
        
        if (nav) {
          observer.observe(nav);
        }
      }
      
      // Optimize scroll performance with passive listeners
      let ticking = false;
      
      function updateOnScroll() {
        // Minimal scroll-based updates for better performance
        ticking = false;
      }
      
      window.addEventListener('scroll', function() {
        if (!ticking) {
          requestAnimationFrame(updateOnScroll);
          ticking = true;
        }
      }, { passive: true });
      
      // Handle reduced motion preferences
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
      
      function handleReducedMotion(mediaQuery) {
        if (mediaQuery.matches) {
          navCircles.forEach(circle => {
            circle.style.animation = 'fadeIn 0.5s ease forwards';
          });
          if (nav) {
            nav.style.animation = 'none';
          }
        }
      }
      
      handleReducedMotion(prefersReducedMotion);
      prefersReducedMotion.addListener(handleReducedMotion);
      
      // Enhanced keyboard navigation
      navCircles.forEach((circle, index) => {
        circle.addEventListener('keydown', function(e) {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.click();
          }
          
          // Arrow key navigation
          if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
            e.preventDefault();
            const nextIndex = (index + 1) % navCircles.length;
            navCircles[nextIndex].focus();
          }
          
          if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
            e.preventDefault();
            const prevIndex = (index - 1 + navCircles.length) % navCircles.length;
            navCircles[prevIndex].focus();
          }
        });
      });
    });
  </script>
</body>
</html> 